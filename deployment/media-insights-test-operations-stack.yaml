AWSTemplateFormatVersion: "2010-09-09"
Description: Media Insights Engine - Test operators, stages, and workflows

Parameters:
  GITHUBSHA:
    Type: "String"
    Description: "SHA of GitHub Commit"
  WorkflowCustomResourceArn:
    Type: String
    Description: "ARN of the Media Insights custom resource that handles creating operations, stages and workflows"
  MediaInsightsEnginePython37Layer:
    Type: String
    Description: "ARN of the Media Insights lambda layer that contains basic python dependencies for boto3, chalice, control plane and dataplane"
  DataplaneEndpoint:
    Type: "String"
    Description: "Lambda name of the dataplane handler"
  DataPlaneBucket:
    Type: "String"
    Description: "Bucket for the dataplane"
  StepfunctionRole:
    Type: String
    Description: "Arn of the MIE stepfunction execution role"

Mappings:
    SourceCode:
        General:
            S3Bucket: '%%BUCKET_NAME%%'
            KeyPrefix: "media-insights-solution/%%VERSION%%/code"

Resources:

  # Service - IAM

  TestExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-test-execution-lambda-role"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  # TODO: Security - Scope this down (should implement tagging on step functions, but this is fine for now
                  # since we are only giving start execution access)
                  - !Join ["", ["arn:aws:states:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":stateMachine:", Ref: "AWS::StackName","*"]]
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
  # Services - Lambda

  VideoSyncOKLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-video-sync-ok"
      Handler: test.video_sync_ok_lambda_handler
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "test_operations.zip"]]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - TestExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataplaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
    Type: AWS::Lambda::Function

  VideoSyncFailLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-video-sync-fail"
      Handler: test.video_sync_fail_lambda_handler
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "test_operations.zip"]]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - TestExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataplaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
    Type: AWS::Lambda::Function

  VideoAsyncOKLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-video-async-ok"
      Handler: test.video_async_ok_lambda_handler
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "test_operations.zip"]]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - TestExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataplaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
    Type: AWS::Lambda::Function

  VideoAsyncOKMonitorLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-video-async-ok-monitor"
      Handler: test.video_async_ok_monitor_lambda_handler
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "test_operations.zip"]]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - TestExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataplaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
    Type: AWS::Lambda::Function

  VideoAsyncFailMonitorLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-video-async-fail-monitor"
      Handler: test.video_async_fail_monitor_lambda_handler
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "test_operations.zip"]]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - TestExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataplaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
    Type: AWS::Lambda::Function

  AudioSyncOKLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-audio-sync-ok"
      Handler: test.audio_sync_ok_lambda_handler
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "test_operations.zip"]]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - TestExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataplaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
    Type: AWS::Lambda::Function

  AudioAsyncOKLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-audio-async-ok"
      Handler: test.audio_async_ok_lambda_handler
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "test_operations.zip"]]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - TestExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataplaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
    Type: AWS::Lambda::Function

  AudioAsyncOKMonitorLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-audio-async-ok-monitor"
      Handler: test.audio_async_ok_monitor_lambda_handler
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "test_operations.zip"]]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - TestExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataplaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
    Type: AWS::Lambda::Function

  ImageSyncOKLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-image-sync-ok"
      Handler: test.image_sync_ok_lambda_handler
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "test_operations.zip"]]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - TestExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataplaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
    Type: AWS::Lambda::Function

  ImageAsyncOKLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-image-async-ok"
      Handler: test.image_async_ok_lambda_handler
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "test_operations.zip"]]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - TestExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataplaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
    Type: AWS::Lambda::Function

  ImageAsyncOKMonitorLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-image-async-ok-monitor"
      Handler: test.image_async_ok_monitor_lambda_handler
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "test_operations.zip"]]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - TestExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataplaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
    Type: AWS::Lambda::Function

  TextSyncOKLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-text-sync-ok"
      Handler: test.text_sync_ok_lambda_handler
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "test_operations.zip"]]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - TestExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataplaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
    Type: AWS::Lambda::Function

  TextAsyncOKLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-text-async-ok"
      Handler: test.text_async_ok_lambda_handler
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "test_operations.zip"]]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - TestExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataplaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
    Type: AWS::Lambda::Function

  TextAsyncOKMonitorLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-text-async-ok-monitor"
      Handler: test.text_async_ok_monitor_lambda_handler
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "test_operations.zip"]]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - TestExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataplaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
    Type: AWS::Lambda::Function

# Build Operations

  VideoSyncOperationCustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "video-sync-ok"
      Type: "Sync"
      Configuration:
          {
            "MediaType": "Video",
            "Enabled": true
          }
      StartLambdaArn: !GetAtt VideoSyncOKLambda.Arn
      StateMachineExecutionRoleArn: !Ref StepfunctionRole

  VideoAsyncOperationCustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "video-async-ok"
      Type: "Async"
      Configuration:
          {
            "MediaType": "Video",
            "Enabled": true
          }
      StartLambdaArn: !GetAtt VideoAsyncOKLambda.Arn
      MonitorLambdaArn: !GetAtt VideoAsyncOKMonitorLambda.Arn
      StateMachineExecutionRoleArn: !Ref StepfunctionRole

  AudioAsyncOperationCustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "audio-async-ok"
      Type: "Async"
      Configuration:
          {
            "MediaType": "Audio",
            "Enabled": true
          }
      StartLambdaArn: !GetAtt AudioAsyncOKLambda.Arn
      MonitorLambdaArn: !GetAtt AudioAsyncOKMonitorLambda.Arn
      StateMachineExecutionRoleArn: !Ref StepfunctionRole

  # Build stages

  AudioVideoAsyncStageCustomResource:
    DependsOn:
      - AudioAsyncOperationCustomResource
      - VideoAsyncOperationCustomResource
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Stage"
      Name: "audio-video-async-ok-stage"
      Operations:
        - !GetAtt AudioAsyncOperationCustomResource.Name
        - !GetAtt VideoAsyncOperationCustomResource.Name

  # Build workflows


  TestWorkflowSingleStageCustomResource:
    DependsOn:
      - VideoAsyncOperationCustomResource
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Workflow"
      Name: "TestWorkflowSingleStage"
      Stages: !Sub
        - |-
          {
            "${stagename}":
              {
                "End": true
            }
          }
        - {stagename: !GetAtt VideoAsyncOperationCustomResource.StageName}
      StartAt: !GetAtt VideoAsyncOperationCustomResource.StageName


  TestWorkflowMultiStageCustomResource:
    DependsOn:
      - AudioVideoAsyncStageCustomResource
      - VideoAsyncOperationCustomResource
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Workflow"
      Name: "TestWorkflowMultiStage"
      Stages: !Sub
        - |-
          {
            "${video_sync}":
              {
                "Next":"${audio_video_async}"
              },
            "${audio_video_async}":
              {
                "Next":"${video_async}"
              },
            "${video_async}":
              {
                "End": true
            }
          }
        - {video_async: !GetAtt VideoAsyncOperationCustomResource.StageName, audio_video_async: !GetAtt AudioVideoAsyncStageCustomResource.Name, video_sync: !GetAtt VideoSyncOperationCustomResource.StageName}
      StartAt: !GetAtt VideoSyncOperationCustomResource.StageName


  TestWorkflowMultiStage2CustomResource:
    DependsOn:
      - AudioVideoAsyncStageCustomResource
      - VideoAsyncOperationCustomResource
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Workflow"
      Name: "TestWorkflowMultiStage2"
      Stages: !Sub
        - |-
          {
            "${audio_video_async}":
              {
                "Next":"${video_async}"
              },
            "${video_async}":
              {
                "End": true
            }
          }
        - {video_async: !GetAtt VideoAsyncOperationCustomResource.StageName, audio_video_async: !GetAtt AudioVideoAsyncStageCustomResource.Name}
      StartAt: !GetAtt AudioVideoAsyncStageCustomResource.Name

Outputs:

  VideoSyncOKLambda:
    Value: !GetAtt VideoSyncOKLambda.Arn
  VideoSyncFailLambda:
    Value: !GetAtt VideoSyncFailLambda.Arn
  VideoAsyncOKLambda:
    Value: !GetAtt VideoAsyncOKLambda.Arn
  VideoAsyncOKMonitorLambda:
    Value: !GetAtt VideoAsyncOKMonitorLambda.Arn
  VideoAsyncFailMonitorLambda:
    Value: !GetAtt VideoAsyncFailMonitorLambda.Arn
  AudioSyncOKLambda:
    Value: !GetAtt AudioSyncOKLambda.Arn
  AudioAsyncOKLambda:
    Value: !GetAtt AudioAsyncOKLambda.Arn
  AudioAsyncOKMonitorLambda:
    Value: !GetAtt AudioAsyncOKMonitorLambda.Arn
  ImageSyncOKLambda:
    Value: !GetAtt ImageSyncOKLambda.Arn
  ImageAsyncOKLambda:
    Value: !GetAtt ImageAsyncOKLambda.Arn
  ImageAsyncOKMonitorLambda:
    Value: !GetAtt ImageAsyncOKMonitorLambda.Arn
  TextSyncOKLambda:
    Value: !GetAtt TextSyncOKLambda.Arn
  TextAsyncOKLambda:
    Value: !GetAtt TextAsyncOKLambda.Arn
  TextAsyncOKMonitorLambda:
    Value: !GetAtt TextAsyncOKMonitorLambda.Arn
  StepFunctionRole:
     Value: !Ref StepfunctionRole
  VideoSyncOperation:
    Value: !GetAtt VideoSyncOperationCustomResource.Name
  VideoAsyncOperation:
    Value: !GetAtt VideoAsyncOperationCustomResource.Name
  AudioAsyncOperation:
    Value: !GetAtt AudioAsyncOperationCustomResource.Name
  AudioVideoAsyncStage:
    Value: !GetAtt AudioVideoAsyncStageCustomResource.Name
  TestWorkflowSingleStage:
    Value: !GetAtt TestWorkflowSingleStageCustomResource.Name
  TestWorkflowMultiStage:
    Value: !GetAtt TestWorkflowMultiStageCustomResource.Name
  TestWorkflowMultiStage2:
    Value: !GetAtt TestWorkflowMultiStage2CustomResource.Name
